import type { NextPage } from "next";
import { useState, useEffect } from "react";
import { api } from "@/utils/api";
import Typography from "@/components/typography";
import PlaylistCard from "@/components/playlist/PlaylistCard";
import Link from "next/link";
import dynamic from "next/dynamic";
import superjson from "superjson";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "@/server/api/root";
import { prisma } from "@/server/db";
import { routes } from "@/utils/constants";
import type { PlaylistType, SongType } from "@/utils/types";

const NewPlaylistButton = dynamic(
  () => import("@/components/buttons/NewPlaylist"),
  {
    ssr: false,
  }
);

const Playlists: NextPage = () => {
  const [allPlaylists, setAllPlaylists] = useState<PlaylistType[]>();

  const playlists = api.playlist.getAllPlaylistsPaginated.useInfiniteQuery(
    {
      limit: 6,
    },
    {
      getNextPageParam: (lastPage) => lastPage.nextCursor,
    }
  );

  const {
    data,
    isLoading,
    // isError,
    // hasNextPage,
    // isFetchingNextPage,
    // fetchNextPage,
  } = playlists;

  useEffect(() => {
    const playlistUpdates: PlaylistType[] = [];
    data &&
      data.pages.forEach((page) => {
        // console.log({ page });
        page.playlists.forEach((playlist) => {
          playlistUpdates.push(playlist);
        });
      });
    setAllPlaylists(playlistUpdates);
  }, [data]);

  console.log({ allPlaylists });

  return (
    <>
      {/* <Head>
        <title>NiftyTunes - Playlists</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head> */}
      <div className="flex flex-wrap justify-between">
        <Typography size="display-lg" type="h1" className="font-bold">
          Playlists
        </Typography>
        <NewPlaylistButton />
      </div>

      <div className="mt-10 grid h-full auto-rows-fr grid-cols-1 gap-10 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
        {isLoading && (
          <>
            <div className="h-full w-full animate-pulse rounded-lg bg-neutral-content/30"></div>
            <div className="h-full w-full animate-pulse rounded-lg bg-neutral-content/30"></div>
            <div className="h-full w-full animate-pulse rounded-lg bg-neutral-content/30"></div>
          </>
        )}
        {allPlaylists &&
          allPlaylists.length > 0 &&
          allPlaylists.map((playlist) => (
            <Link
              key={playlist?.id}
              href={routes.playlistDetail(playlist?.id || "")}
              className="h-full"
            >
              <PlaylistCard
                playlist={playlist}
                songs={playlist?.songs as SongType[]}
                fullWidth
              />
            </Link>
          ))}
      </div>
    </>
  );
};

export async function getStaticProps() {
  //
  const helpers = createServerSideHelpers({
    router: appRouter,
    // ctx: await createContext(),
    ctx: {
      session: null,
      ip: "",
      prisma,
    },
    transformer: superjson,
  });

  void Promise.allSettled([
    await helpers.playlist.getAllPlaylistsPaginated.prefetchInfinite({
      limit: 6,
    }),
  ]);

  return {
    props: {
      trpcState: helpers.dehydrate(),
    },
    // Next.js will attempt to re-generate the page:
    // - When a request comes in
    // - At most once every 10 seconds
    revalidate: 30, // In seconds
  };
}

export default Playlists;

// export async function getStaticProps() {
//   const ssg = await createProxySSGHelpers({
//     router: appRouter,
//     ctx: {
//       session: {
//         user: {
//           walletAddress: '',
//         },
//         isAdmin: false,
//         isSuperAdmin: false,
//       },
//     },
//     transformer: superjson, // optional - adds superjson serialization
//   });
//   Promise.allSettled([
//     await ssg.playlist.getAllPlaylistsPaginated.prefetchInfinite({
//       limit: 15,
//     }),
//   ]);

//   return {
//     props: {
//       apiState: ssg.dehydrate(),
//     },
//     // Next.js will attempt to re-generate the page:
//     // - When a request comes in
//     // - At most once every 10 seconds
//     revalidate: 60, // In seconds
//   };
// }
